[1/13] Linking C static library esp-idf/mqtt/libmqtt.a
[2/13] Linking C static library esp-idf/spiffs/libspiffs.a
[3/13] Linking C static library esp-idf/wifi_provisioning/libwifi_provisioning.a
[4/13] Performing build step for 'bootloader'
[1/1] cd /home/eng-tera/esp/wifi-scan/build/bootloader/esp-idf/esptool_py && /home/eng-tera/.espressif/python_env/idf5.2_py3.10_env/bin/python /home/eng-tera/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 /home/eng-tera/esp/wifi-scan/build/bootloader/bootloader.bin
Bootloader binary size 0x6860 bytes. 0x7a0 bytes (7%) free.
[5/11] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/main.c.obj
[6/11] Linking C static library esp-idf/main/libmain.a
[7/11] Generating ld/sections.ld
[8/11] Building C object CMakeFiles/template.elf.dir/project_elf_src_esp32.c.obj
[9/11] Linking CXX executable template.elf
[10/11] Generating binary image from built executable
esptool.py v4.8.1
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated /home/eng-tera/esp/wifi-scan/build/template.bin
[11/11] cd /home/eng-tera/esp/wifi-scan/build/esp-idf/esptool_py && /home/eng-tera/.espressif/python_env/idf5.2_py3.10_env/bin/python /home/eng-tera/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app /home/eng-tera/esp/wifi-scan/build/partition_table/partition-table.bin /home/eng-tera/esp/wifi-scan/build/template.bin
template.bin binary size 0xb5470 bytes. Smallest app partition is 0x100000 bytes. 0x4ab90 bytes (29%) free.
